// auth.js - Gestionnaire d'authentification
class AuthManager {
    constructor() {
        this.user = null;
        this.init();
    }

    init() {
        firebase.auth().onAuthStateChanged((user) => {
            this.user = user;
            this.onAuthStateChanged(user);
        });
    }

    async signIn(email, password) {
        try {
            const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
            await this.updateLastLogin(userCredential.user.uid);
            return { success: true, user: userCredential.user };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async signUp(email, password, name) {
        try {
            const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            console.log("‚úÖ Compte Firebase cr√©√©:", user.uid);

            // Envoi de l'email de v√©rification
            await user.sendEmailVerification();

            // Sauvegarde des infos utilisateur dans Firestore
            await db.collection("users").doc(user.uid).set({
                email: email,
                name: name,
                createdAt: new Date(),
                lastLogin: new Date(),
                isAdmin: false
            });

            // üéØ G√âN√âRATION AUTOMATIQUE DU LIEN DE PARRAINAGE
            await this.genererLienParrainage(user.uid, email);
            
            // üéØ D√âTECTION DE PARRAINAGE SI CODE PR√âSENT DANS L'URL
            const urlParams = new URLSearchParams(window.location.search);
            const codeParrain = urlParams.get("ref");
            if (codeParrain) {
                console.log("üéØ Code parrainage d√©tect√©:", codeParrain);
                await this.detecterParrainage(email, codeParrain);
            }

            return { success: true, user: user };
        } catch (error) {
            console.error("‚ùå Erreur lors de l'inscription:", error);
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    // üéØ FONCTIONS DE PARRAINAGE

    async genererLienParrainage(userId, email) {
        try {
            const codeParrainage = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).set({
                code: codeParrainage,
                userId: userId,
                email: email,
                dateCreation: new Date(),
                utilisations: 0,
                maxUtilisations: 5,
                actif: true,
                filleuls: [],
                recompensesTotal: 0
            });
            
            console.log("‚úÖ Code parrainage g√©n√©r√©:", codeParrainage);
            return codeParrainage;
        } catch (error) {
            console.error("‚ùå Erreur g√©n√©ration code parrainage:", error);
            return null;
        }
    }

    async detecterParrainage(email, codeParrainage) {
        try {
            console.log("üîç Recherche parrain avec code:", codeParrainage);
            
            const parrainQuery = await db.collection("parrainage")
                .where("code", "==", codeParrainage)
                .where("actif", "==", true)
                .get();

            if (!parrainQuery.empty) {
                const parrainDoc = parrainQuery.docs[0];
                const parrainData = parrainDoc.data();
                const parrainId = parrainDoc.id;
                
                console.log("‚úÖ Parrain trouv√©:", parrainData.email);
                
                if (parrainData.utilisations < parrainData.maxUtilisations) {
                    console.log("üéØ Attribution du parrainage...");
                    
                    await db.collection("parrainage").doc(parrainId).update({
                        utilisations: firebase.firestore.FieldValue.increment(1),
                        filleuls: firebase.firestore.FieldValue.arrayUnion(email)
                    });
                    
                    await this.attribuerRecompenses(parrainId, email);
                    await this.regenererCode(parrainId);
                    
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error("‚ùå Erreur d√©tection parrainage:", error);
            return false;
        }
    }

    async attribuerRecompenses(parrainId, emailFilleul) {
        try {
            const montantParrain = 1000;
            const montantFilleul = 500;
            
            // R√âCOMPENSE POUR LE PARRAIN
            await db.collection("recompenses").add({
                userId: parrainId,
                type: "parrainage_reussi",
                montant: montantParrain,
                description: "Parrainage r√©ussi - " + emailFilleul,
                dateAttribution: new Date(),
                statut: "actif",
                dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            });
            
            await db.collection("parrainage").doc(parrainId).update({
                recompensesTotal: firebase.firestore.FieldValue.increment(montantParrain)
            });
            
            // R√âCOMPENSE POUR LE FILLEUL
            const filleulQuery = await db.collection("users")
                .where("email", "==", emailFilleul)
                .get();
                
            if (!filleulQuery.empty) {
                const filleulId = filleulQuery.docs[0].id;
                
                await db.collection("recompenses").add({
                    userId: filleulId,
                    type: "bienvenue_parrainage",
                    montant: montantFilleul,
                    description: "R√©duction bienvenue par parrainage",
                    dateAttribution: new Date(),
                    statut: "actif",
                    dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
                });
            }
            
            console.log("üéÅ R√©compenses attribu√©es avec succ√®s");
            return true;
        } catch (error) {
            console.error("‚ùå Erreur attribution r√©compenses:", error);
            return false;
        }
    }

    async regenererCode(userId) {
        try {
            const nouveauCode = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).update({
                code: nouveauCode,
                dateDerniereRegeneration: new Date()
            });
            
            console.log("üîÑ Code r√©g√©n√©r√©:", nouveauCode);
            return nouveauCode;
        } catch (error) {
            console.error("‚ùå Erreur r√©g√©n√©ration code:", error);
            return null;
        }
    }

    mettreAJourInterfaceParrainage(userId) {
        if (!userId) return;
        
        console.log("üîÑ Mise √† jour interface parrainage pour:", userId);
        
        db.collection("parrainage").doc(userId).onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                
                // Mettre √† jour l'interface
                if (document.getElementById("parrainsCount")) {
                    document.getElementById("parrainsCount").textContent = data.utilisations || 0;
                }
                if (document.getElementById("gainsTotal")) {
                    document.getElementById("gainsTotal").textContent = (data.recompensesTotal || 0) + " MRU";
                }
                if (document.getElementById("lienParrainage")) {
                    const lienParrainage = window.location.origin + ""/index.html?ref="" + data.code;
                    document.getElementById("lienParrainage").value = lienParrainage;
                }
                if (document.getElementById("limiteParrainage")) {
                    document.getElementById("limiteParrainage").textContent = 
                        "${data.utilisations || 0}/${data.maxUtilisations || 5} utilisations";
                }
                
                const sectionParrainage = document.getElementById("parrainageSection");
                if (sectionParrainage) {
                    sectionParrainage.style.display = "block";
                }
            }
        });
    }

    // M√©thode resetPassword manquante
    async resetPassword(email) {
        try {
            await firebase.auth().sendPasswordResetEmail(email);
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async signUp(email, password, name) {
        try {
            const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            console.log("‚úÖ Compte Firebase cr√©√©:", user.uid);

            // Envoi de l'email de v√©rification
            await user.sendEmailVerification();

            // Sauvegarde des infos utilisateur dans Firestore
            await db.collection("users").doc(user.uid).set({
                email: email,
                name: name,
                createdAt: new Date(),
                lastLogin: new Date(),
                isAdmin: false
            });

            // üéØ G√âN√âRATION AUTOMATIQUE DU LIEN DE PARRAINAGE
            await this.genererLienParrainage(user.uid, email);
            
            // üéØ D√âTECTION DE PARRAINAGE SI CODE PR√âSENT DANS L'URL
            const urlParams = new URLSearchParams(window.location.search);
            const codeParrain = urlParams.get("ref");
            if (codeParrain) {
                console.log("üéØ Code parrainage d√©tect√©:", codeParrain);
                await this.detecterParrainage(email, codeParrain);
            }

            return { success: true, user: user };
        } catch (error) {
            console.error("‚ùå Erreur lors de l'inscription:", error);
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    // üéØ FONCTIONS DE PARRAINAGE

    async genererLienParrainage(userId, email) {
        try {
            const codeParrainage = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).set({
                code: codeParrainage,
                userId: userId,
                email: email,
                dateCreation: new Date(),
                utilisations: 0,
                maxUtilisations: 5,
                actif: true,
                filleuls: [],
                recompensesTotal: 0
            });
            
            console.log("‚úÖ Code parrainage g√©n√©r√©:", codeParrainage);
            return codeParrainage;
        } catch (error) {
            console.error("‚ùå Erreur g√©n√©ration code parrainage:", error);
            return null;
        }
    }

    async detecterParrainage(email, codeParrainage) {
        try {
            console.log("üîç Recherche parrain avec code:", codeParrainage);
            
            const parrainQuery = await db.collection("parrainage")
                .where("code", "==", codeParrainage)
                .where("actif", "==", true)
                .get();

            if (!parrainQuery.empty) {
                const parrainDoc = parrainQuery.docs[0];
                const parrainData = parrainDoc.data();
                const parrainId = parrainDoc.id;
                
                console.log("‚úÖ Parrain trouv√©:", parrainData.email);
                
                if (parrainData.utilisations < parrainData.maxUtilisations) {
                    console.log("üéØ Attribution du parrainage...");
                    
                    await db.collection("parrainage").doc(parrainId).update({
                        utilisations: firebase.firestore.FieldValue.increment(1),
                        filleuls: firebase.firestore.FieldValue.arrayUnion(email)
                    });
                    
                    await this.attribuerRecompenses(parrainId, email);
                    await this.regenererCode(parrainId);
                    
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error("‚ùå Erreur d√©tection parrainage:", error);
            return false;
        }
    }

    async attribuerRecompenses(parrainId, emailFilleul) {
        try {
            const montantParrain = 1000;
            const montantFilleul = 500;
            
            // R√âCOMPENSE POUR LE PARRAIN
            await db.collection("recompenses").add({
                userId: parrainId,
                type: "parrainage_reussi",
                montant: montantParrain,
                description: "Parrainage r√©ussi - " + emailFilleul,
                dateAttribution: new Date(),
                statut: "actif",
                dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            });
            
            await db.collection("parrainage").doc(parrainId).update({
                recompensesTotal: firebase.firestore.FieldValue.increment(montantParrain)
            });
            
            // R√âCOMPENSE POUR LE FILLEUL
            const filleulQuery = await db.collection("users")
                .where("email", "==", emailFilleul)
                .get();
                
            if (!filleulQuery.empty) {
                const filleulId = filleulQuery.docs[0].id;
                
                await db.collection("recompenses").add({
                    userId: filleulId,
                    type: "bienvenue_parrainage",
                    montant: montantFilleul,
                    description: "R√©duction bienvenue par parrainage",
                    dateAttribution: new Date(),
                    statut: "actif",
                    dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
                });
            }
            
            console.log("üéÅ R√©compenses attribu√©es avec succ√®s");
            return true;
        } catch (error) {
            console.error("‚ùå Erreur attribution r√©compenses:", error);
            return false;
        }
    }

    async regenererCode(userId) {
        try {
            const nouveauCode = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).update({
                code: nouveauCode,
                dateDerniereRegeneration: new Date()
            });
            
            console.log("üîÑ Code r√©g√©n√©r√©:", nouveauCode);
            return nouveauCode;
        } catch (error) {
            console.error("‚ùå Erreur r√©g√©n√©ration code:", error);
            return null;
        }
    }

    mettreAJourInterfaceParrainage(userId) {
        if (!userId) return;
        
        console.log("üîÑ Mise √† jour interface parrainage pour:", userId);
        
        db.collection("parrainage").doc(userId).onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                
                // Mettre √† jour l'interface
                if (document.getElementById("parrainsCount")) {
                    document.getElementById("parrainsCount").textContent = data.utilisations || 0;
                }
                if (document.getElementById("gainsTotal")) {
                    document.getElementById("gainsTotal").textContent = (data.recompensesTotal || 0) + " MRU";
                }
                if (document.getElementById("lienParrainage")) {
                    const lienParrainage = window.location.origin + ""/index.html?ref="" + data.code;
                    document.getElementById("lienParrainage").value = lienParrainage;
                }
                if (document.getElementById("limiteParrainage")) {
                    document.getElementById("limiteParrainage").textContent = 
                        "${data.utilisations || 0}/${data.maxUtilisations || 5} utilisations";
                }
                
                const sectionParrainage = document.getElementById("parrainageSection");
                if (sectionParrainage) {
                    sectionParrainage.style.display = "block";
                }
            }
        });
    }

    // M√©thode resetPassword manquante
    async resetPassword(email) {
        try {
            await firebase.auth().sendPasswordResetEmail(email);
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async signOut() {
        try {
            await firebase.auth().signOut();
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    // üéØ FONCTIONS DE PARRAINAGE

    async genererLienParrainage(userId, email) {
        try {
            const codeParrainage = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).set({
                code: codeParrainage,
                userId: userId,
                email: email,
                dateCreation: new Date(),
                utilisations: 0,
                maxUtilisations: 5,
                actif: true,
                filleuls: [],
                recompensesTotal: 0
            });
            
            console.log("‚úÖ Code parrainage g√©n√©r√©:", codeParrainage);
            return codeParrainage;
        } catch (error) {
            console.error("‚ùå Erreur g√©n√©ration code parrainage:", error);
            return null;
        }
    }

    async detecterParrainage(email, codeParrainage) {
        try {
            console.log("üîç Recherche parrain avec code:", codeParrainage);
            
            const parrainQuery = await db.collection("parrainage")
                .where("code", "==", codeParrainage)
                .where("actif", "==", true)
                .get();

            if (!parrainQuery.empty) {
                const parrainDoc = parrainQuery.docs[0];
                const parrainData = parrainDoc.data();
                const parrainId = parrainDoc.id;
                
                console.log("‚úÖ Parrain trouv√©:", parrainData.email);
                
                if (parrainData.utilisations < parrainData.maxUtilisations) {
                    console.log("üéØ Attribution du parrainage...");
                    
                    await db.collection("parrainage").doc(parrainId).update({
                        utilisations: firebase.firestore.FieldValue.increment(1),
                        filleuls: firebase.firestore.FieldValue.arrayUnion(email)
                    });
                    
                    await this.attribuerRecompenses(parrainId, email);
                    await this.regenererCode(parrainId);
                    
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error("‚ùå Erreur d√©tection parrainage:", error);
            return false;
        }
    }

    async attribuerRecompenses(parrainId, emailFilleul) {
        try {
            const montantParrain = 1000;
            const montantFilleul = 500;
            
            // R√âCOMPENSE POUR LE PARRAIN
            await db.collection("recompenses").add({
                userId: parrainId,
                type: "parrainage_reussi",
                montant: montantParrain,
                description: "Parrainage r√©ussi - " + emailFilleul,
                dateAttribution: new Date(),
                statut: "actif",
                dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            });
            
            await db.collection("parrainage").doc(parrainId).update({
                recompensesTotal: firebase.firestore.FieldValue.increment(montantParrain)
            });
            
            // R√âCOMPENSE POUR LE FILLEUL
            const filleulQuery = await db.collection("users")
                .where("email", "==", emailFilleul)
                .get();
                
            if (!filleulQuery.empty) {
                const filleulId = filleulQuery.docs[0].id;
                
                await db.collection("recompenses").add({
                    userId: filleulId,
                    type: "bienvenue_parrainage",
                    montant: montantFilleul,
                    description: "R√©duction bienvenue par parrainage",
                    dateAttribution: new Date(),
                    statut: "actif",
                    dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
                });
            }
            
            console.log("üéÅ R√©compenses attribu√©es avec succ√®s");
            return true;
        } catch (error) {
            console.error("‚ùå Erreur attribution r√©compenses:", error);
            return false;
        }
    }

    async regenererCode(userId) {
        try {
            const nouveauCode = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).update({
                code: nouveauCode,
                dateDerniereRegeneration: new Date()
            });
            
            console.log("üîÑ Code r√©g√©n√©r√©:", nouveauCode);
            return nouveauCode;
        } catch (error) {
            console.error("‚ùå Erreur r√©g√©n√©ration code:", error);
            return null;
        }
    }

    mettreAJourInterfaceParrainage(userId) {
        if (!userId) return;
        
        console.log("üîÑ Mise √† jour interface parrainage pour:", userId);
        
        db.collection("parrainage").doc(userId).onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                
                // Mettre √† jour l'interface
                if (document.getElementById("parrainsCount")) {
                    document.getElementById("parrainsCount").textContent = data.utilisations || 0;
                }
                if (document.getElementById("gainsTotal")) {
                    document.getElementById("gainsTotal").textContent = (data.recompensesTotal || 0) + " MRU";
                }
                if (document.getElementById("lienParrainage")) {
                    const lienParrainage = window.location.origin + ""/index.html?ref="" + data.code;
                    document.getElementById("lienParrainage").value = lienParrainage;
                }
                if (document.getElementById("limiteParrainage")) {
                    document.getElementById("limiteParrainage").textContent = 
                        "${data.utilisations || 0}/${data.maxUtilisations || 5} utilisations";
                }
                
                const sectionParrainage = document.getElementById("parrainageSection");
                if (sectionParrainage) {
                    sectionParrainage.style.display = "block";
                }
            }
        });
    }

    // M√©thode resetPassword manquante
    async resetPassword(email) {
        try {
            await firebase.auth().sendPasswordResetEmail(email);
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async updateLastLogin(uid) {
        try {
            await db.collection('users').doc(uid).update({
                lastLogin: firebase.firestore.FieldValue.serverTimestamp()
            });
        } catch (error) {
            console.error('Erreur mise √† jour lastLogin:', error);
        }
    }

    async isAdmin() {
        if (!this.user) return false;
        
        try {
            const userDoc = await db.collection('users').doc(this.user.uid).get();
            return userDoc.exists && userDoc.data().role === 'admin';
        } catch (error) {
            console.error('Erreur v√©rification admin:', error);
            return false;
        }
    }

    onAuthStateChanged(user) {
        if (user) {
            console.log("Utilisateur connect√©:", user.email);
            this.mettreAJourInterfaceParrainage(user.uid);
        } else {
            console.log("Utilisateur d√©connect√©");
        }
    }

    getErrorMessage(error) {
        const errorMessages = {
            'auth/invalid-email': 'Adresse email invalide',
            'auth/user-disabled': 'Ce compte a √©t√© d√©sactiv√©',
            'auth/user-not-found': 'Aucun compte trouv√© avec cet email',
            'auth/wrong-password': 'Mot de passe incorrect',
            'auth/email-already-in-use': 'Cette adresse email est d√©j√† utilis√©e',
            'auth/weak-password': 'Le mot de passe est trop faible',
            'auth/network-request-failed': 'Erreur r√©seau. Veuillez r√©essayer.',
            'auth/too-many-requests': 'Trop de tentatives. Veuillez r√©essayer plus tard.'
        };

        return errorMessages[error.code] || error.message;
    }

    // üéØ FONCTIONS DE PARRAINAGE

    async genererLienParrainage(userId, email) {
        try {
            const codeParrainage = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).set({
                code: codeParrainage,
                userId: userId,
                email: email,
                dateCreation: new Date(),
                utilisations: 0,
                maxUtilisations: 5,
                actif: true,
                filleuls: [],
                recompensesTotal: 0
            });
            
            console.log("‚úÖ Code parrainage g√©n√©r√©:", codeParrainage);
            return codeParrainage;
        } catch (error) {
            console.error("‚ùå Erreur g√©n√©ration code parrainage:", error);
            return null;
        }
    }

    async detecterParrainage(email, codeParrainage) {
        try {
            console.log("üîç Recherche parrain avec code:", codeParrainage);
            
            const parrainQuery = await db.collection("parrainage")
                .where("code", "==", codeParrainage)
                .where("actif", "==", true)
                .get();

            if (!parrainQuery.empty) {
                const parrainDoc = parrainQuery.docs[0];
                const parrainData = parrainDoc.data();
                const parrainId = parrainDoc.id;
                
                console.log("‚úÖ Parrain trouv√©:", parrainData.email);
                
                if (parrainData.utilisations < parrainData.maxUtilisations) {
                    console.log("üéØ Attribution du parrainage...");
                    
                    await db.collection("parrainage").doc(parrainId).update({
                        utilisations: firebase.firestore.FieldValue.increment(1),
                        filleuls: firebase.firestore.FieldValue.arrayUnion(email)
                    });
                    
                    await this.attribuerRecompenses(parrainId, email);
                    await this.regenererCode(parrainId);
                    
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error("‚ùå Erreur d√©tection parrainage:", error);
            return false;
        }
    }

    async attribuerRecompenses(parrainId, emailFilleul) {
        try {
            const montantParrain = 1000;
            const montantFilleul = 500;
            
            // R√âCOMPENSE POUR LE PARRAIN
            await db.collection("recompenses").add({
                userId: parrainId,
                type: "parrainage_reussi",
                montant: montantParrain,
                description: "Parrainage r√©ussi - " + emailFilleul,
                dateAttribution: new Date(),
                statut: "actif",
                dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            });
            
            await db.collection("parrainage").doc(parrainId).update({
                recompensesTotal: firebase.firestore.FieldValue.increment(montantParrain)
            });
            
            // R√âCOMPENSE POUR LE FILLEUL
            const filleulQuery = await db.collection("users")
                .where("email", "==", emailFilleul)
                .get();
                
            if (!filleulQuery.empty) {
                const filleulId = filleulQuery.docs[0].id;
                
                await db.collection("recompenses").add({
                    userId: filleulId,
                    type: "bienvenue_parrainage",
                    montant: montantFilleul,
                    description: "R√©duction bienvenue par parrainage",
                    dateAttribution: new Date(),
                    statut: "actif",
                    dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
                });
            }
            
            console.log("üéÅ R√©compenses attribu√©es avec succ√®s");
            return true;
        } catch (error) {
            console.error("‚ùå Erreur attribution r√©compenses:", error);
            return false;
        }
    }

    async regenererCode(userId) {
        try {
            const nouveauCode = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).update({
                code: nouveauCode,
                dateDerniereRegeneration: new Date()
            });
            
            console.log("üîÑ Code r√©g√©n√©r√©:", nouveauCode);
            return nouveauCode;
        } catch (error) {
            console.error("‚ùå Erreur r√©g√©n√©ration code:", error);
            return null;
        }
    }

    mettreAJourInterfaceParrainage(userId) {
        if (!userId) return;
        
        console.log("üîÑ Mise √† jour interface parrainage pour:", userId);
        
        db.collection("parrainage").doc(userId).onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                
                // Mettre √† jour l'interface
                if (document.getElementById("parrainsCount")) {
                    document.getElementById("parrainsCount").textContent = data.utilisations || 0;
                }
                if (document.getElementById("gainsTotal")) {
                    document.getElementById("gainsTotal").textContent = (data.recompensesTotal || 0) + " MRU";
                }
                if (document.getElementById("lienParrainage")) {
                    const lienParrainage = window.location.origin + ""/index.html?ref="" + data.code;
                    document.getElementById("lienParrainage").value = lienParrainage;
                }
                if (document.getElementById("limiteParrainage")) {
                    document.getElementById("limiteParrainage").textContent = 
                        "${data.utilisations || 0}/${data.maxUtilisations || 5} utilisations";
                }
                
                const sectionParrainage = document.getElementById("parrainageSection");
                if (sectionParrainage) {
                    sectionParrainage.style.display = "block";
                }
            }
        });
    }

    // M√©thode resetPassword manquante
    async resetPassword(email) {
        try {
            await firebase.auth().sendPasswordResetEmail(email);
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }
}

// Initialisation globale
let authManager;

// Attendre que Firebase soit charg√©
if (typeof firebase !== 'undefined') {
    authManager = new AuthManager();
} else {
    document.addEventListener('DOMContentLoaded', () => {
        authManager = new AuthManager();
    });
}


// üìÅ auth.js - FONCTIONS MANQUANTES POUR reductions.html

// ===== FONCTIONS POUR LES MODALS =====

function showLoginModal() {
    const modal = document.getElementById('loginModal');
    if (modal) {
        modal.style.display = 'flex';
        // Focus sur le premier champ
        setTimeout(() => {
            const emailInput = document.getElementById('loginEmail');
            if (emailInput) emailInput.focus();
        }, 100);
    }
}

function showSignupModal() {
    const modal = document.getElementById('signupModal');
    if (modal) {
        modal.style.display = 'flex';
        // Focus sur le premier champ
        setTimeout(() => {
            const nameInput = document.getElementById('signupName');
            if (nameInput) nameInput.focus();
        }, 100);
    }
}

function showResetPassword() {
    closeModal('loginModal');
    const modal = document.getElementById('resetPasswordModal');
    if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
            const emailInput = document.getElementById('resetEmail');
            if (emailInput) emailInput.focus();
        }, 100);
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// ===== GESTION DES FORMULAIRES =====

// Initialiser les √©v√©nements des formulaires
document.addEventListener('DOMContentLoaded', function() {
    // Formulaire de connexion
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            const result = await authManager.signIn(email, password);
            if (!result.success) {
                showMessage('Erreur: ' + result.error, 'error');
            }
        });
    }

    async signUp(email, password, name) {
        try {
            const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            console.log("‚úÖ Compte Firebase cr√©√©:", user.uid);

            // Envoi de l'email de v√©rification
            await user.sendEmailVerification();

            // Sauvegarde des infos utilisateur dans Firestore
            await db.collection("users").doc(user.uid).set({
                email: email,
                name: name,
                createdAt: new Date(),
                lastLogin: new Date(),
                isAdmin: false
            });

            // üéØ G√âN√âRATION AUTOMATIQUE DU LIEN DE PARRAINAGE
            await this.genererLienParrainage(user.uid, email);
            
            // üéØ D√âTECTION DE PARRAINAGE SI CODE PR√âSENT DANS L'URL
            const urlParams = new URLSearchParams(window.location.search);
            const codeParrain = urlParams.get("ref");
            if (codeParrain) {
                console.log("üéØ Code parrainage d√©tect√©:", codeParrain);
                await this.detecterParrainage(email, codeParrain);
            }

            return { success: true, user: user };
        } catch (error) {
            console.error("‚ùå Erreur lors de l'inscription:", error);
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async signUp(email, password, name) {
        try {
            const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            console.log("‚úÖ Compte Firebase cr√©√©:", user.uid);

            // Envoi de l'email de v√©rification
            await user.sendEmailVerification();

            // Sauvegarde des infos utilisateur dans Firestore
            await db.collection("users").doc(user.uid).set({
                email: email,
                name: name,
                createdAt: new Date(),
                lastLogin: new Date(),
                isAdmin: false
            });

            // üéØ G√âN√âRATION AUTOMATIQUE DU LIEN DE PARRAINAGE
            await this.genererLienParrainage(user.uid, email);
            
            // üéØ D√âTECTION DE PARRAINAGE SI CODE PR√âSENT DANS L'URL
            const urlParams = new URLSearchParams(window.location.search);
            const codeParrain = urlParams.get("ref");
            if (codeParrain) {
                console.log("üéØ Code parrainage d√©tect√©:", codeParrain);
                await this.detecterParrainage(email, codeParrain);
            }

            return { success: true, user: user };
        } catch (error) {
            console.error("‚ùå Erreur lors de l'inscription:", error);
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    // üéØ FONCTIONS DE PARRAINAGE

    async genererLienParrainage(userId, email) {
        try {
            const codeParrainage = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).set({
                code: codeParrainage,
                userId: userId,
                email: email,
                dateCreation: new Date(),
                utilisations: 0,
                maxUtilisations: 5,
                actif: true,
                filleuls: [],
                recompensesTotal: 0
            });
            
            console.log("‚úÖ Code parrainage g√©n√©r√©:", codeParrainage);
            return codeParrainage;
        } catch (error) {
            console.error("‚ùå Erreur g√©n√©ration code parrainage:", error);
            return null;
        }
    }

    async detecterParrainage(email, codeParrainage) {
        try {
            console.log("üîç Recherche parrain avec code:", codeParrainage);
            
            const parrainQuery = await db.collection("parrainage")
                .where("code", "==", codeParrainage)
                .where("actif", "==", true)
                .get();

            if (!parrainQuery.empty) {
                const parrainDoc = parrainQuery.docs[0];
                const parrainData = parrainDoc.data();
                const parrainId = parrainDoc.id;
                
                console.log("‚úÖ Parrain trouv√©:", parrainData.email);
                
                if (parrainData.utilisations < parrainData.maxUtilisations) {
                    console.log("üéØ Attribution du parrainage...");
                    
                    await db.collection("parrainage").doc(parrainId).update({
                        utilisations: firebase.firestore.FieldValue.increment(1),
                        filleuls: firebase.firestore.FieldValue.arrayUnion(email)
                    });
                    
                    await this.attribuerRecompenses(parrainId, email);
                    await this.regenererCode(parrainId);
                    
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error("‚ùå Erreur d√©tection parrainage:", error);
            return false;
        }
    }

    async attribuerRecompenses(parrainId, emailFilleul) {
        try {
            const montantParrain = 1000;
            const montantFilleul = 500;
            
            // R√âCOMPENSE POUR LE PARRAIN
            await db.collection("recompenses").add({
                userId: parrainId,
                type: "parrainage_reussi",
                montant: montantParrain,
                description: "Parrainage r√©ussi - " + emailFilleul,
                dateAttribution: new Date(),
                statut: "actif",
                dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            });
            
            await db.collection("parrainage").doc(parrainId).update({
                recompensesTotal: firebase.firestore.FieldValue.increment(montantParrain)
            });
            
            // R√âCOMPENSE POUR LE FILLEUL
            const filleulQuery = await db.collection("users")
                .where("email", "==", emailFilleul)
                .get();
                
            if (!filleulQuery.empty) {
                const filleulId = filleulQuery.docs[0].id;
                
                await db.collection("recompenses").add({
                    userId: filleulId,
                    type: "bienvenue_parrainage",
                    montant: montantFilleul,
                    description: "R√©duction bienvenue par parrainage",
                    dateAttribution: new Date(),
                    statut: "actif",
                    dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
                });
            }
            
            console.log("üéÅ R√©compenses attribu√©es avec succ√®s");
            return true;
        } catch (error) {
            console.error("‚ùå Erreur attribution r√©compenses:", error);
            return false;
        }
    }

    async regenererCode(userId) {
        try {
            const nouveauCode = "ANDU-" + Math.random().toString(36).substr(2, 8).toUpperCase();
            
            await db.collection("parrainage").doc(userId).update({
                code: nouveauCode,
                dateDerniereRegeneration: new Date()
            });
            
            console.log("üîÑ Code r√©g√©n√©r√©:", nouveauCode);
            return nouveauCode;
        } catch (error) {
            console.error("‚ùå Erreur r√©g√©n√©ration code:", error);
            return null;
        }
    }

    mettreAJourInterfaceParrainage(userId) {
        if (!userId) return;
        
        console.log("üîÑ Mise √† jour interface parrainage pour:", userId);
        
        db.collection("parrainage").doc(userId).onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                
                // Mettre √† jour l'interface
                if (document.getElementById("parrainsCount")) {
                    document.getElementById("parrainsCount").textContent = data.utilisations || 0;
                }
                if (document.getElementById("gainsTotal")) {
                    document.getElementById("gainsTotal").textContent = (data.recompensesTotal || 0) + " MRU";
                }
                if (document.getElementById("lienParrainage")) {
                    const lienParrainage = window.location.origin + ""/index.html?ref="" + data.code;
                    document.getElementById("lienParrainage").value = lienParrainage;
                }
                if (document.getElementById("limiteParrainage")) {
                    document.getElementById("limiteParrainage").textContent = 
                        "${data.utilisations || 0}/${data.maxUtilisations || 5} utilisations";
                }
                
                const sectionParrainage = document.getElementById("parrainageSection");
                if (sectionParrainage) {
                    sectionParrainage.style.display = "block";
                }
            }
        });
    }

    // M√©thode resetPassword manquante
    async resetPassword(email) {
        try {
            await firebase.auth().sendPasswordResetEmail(email);
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    // Formulaire d'inscription
    const signupForm = document.getElementById('signupForm');
    if (signupForm) {
        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            const name = document.getElementById('signupName').value;
            
            const result = await authManager.signUp(email, password, name);
            if (!result.success) {
                showMessage('Erreur: ' + result.error, 'error');
            }
        });
    }

    // Formulaire de r√©initialisation
    const resetForm = document.getElementById('resetPasswordForm');
    if (resetForm) {
        resetForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('resetEmail').value;
            
            const result = await authManager.resetPassword(email);
            if (!result.success) {
                showMessage('Erreur: ' + result.error, 'error');
            }
        });
    }

    // Fermer les modals en cliquant √† l'ext√©rieur
    window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });

    // Permettre la fermeture avec Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (modal.style.display === 'flex') {
                    modal.style.display = 'none';
                }
            });
        }
    });
});

// ===== FONCTIONS D'AFFICHAGE DES MESSAGES =====

function showMessage(text, type = 'success') {
    // Cr√©er un √©l√©ment de message temporaire
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        animation: slideInRight 0.3s ease;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    
    if (type === 'success') {
        messageDiv.style.background = '#48bb78';
    } else if (type === 'error') {
        messageDiv.style.background = '#e53e3e';
    } else if (type === 'warning') {
        messageDiv.style.background = '#ed8936';
    }
    
    messageDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-exclamation-triangle'}"></i>
            <span>${text}</span>
        </div>
    `;
    
    document.body.appendChild(messageDiv);
    
    // Supprimer apr√®s 5 secondes
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.parentNode.removeChild(messageDiv);
                }
            }, 300);
        }
    }, 5000);
}

// ===== FONCTIONS ADMIN =====

function showAdminDashboard() {
    window.open('admin-dashboard.html', '_blank');
}

function showAnalytics() {
    // Ouvrir le dashboard sur la section analytics
    if (window.adminWindow && !window.adminWindow.closed) {
        window.adminWindow.showSection('analytics');
    } else {
        window.open('admin-dashboard.html#analytics', '_blank');
    }
}

function showCodeManager() {
    // Ouvrir le dashboard sur la section codes
    if (window.adminWindow && !window.adminWindow.closed) {
        window.adminWindow.showSection('codes');
        if (window.adminWindow.showCreateCodeModal) {
            window.adminWindow.showCreateCodeModal();
        }
    } else {
        window.open('admin-dashboard.html#codes', '_blank');
    }
}

function showUserHistory() {
    showMessage('Fonctionnalit√© historique utilisateur - √Ä impl√©menter', 'warning');
}

// ===== ANIMATIONS CSS =====

// Ajouter les styles d'animation s'ils n'existent pas
if (!document.querySelector('#auth-animations')) {
    const style = document.createElement('style');
    style.id = 'auth-animations';
    style.textContent = `
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes fadeOut {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
            }
        }
        
        .modal {
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
    `;
    document.head.appendChild(style);
}

console.log('‚úÖ auth.js - Fonctions modals charg√©es avec succ√®s');
