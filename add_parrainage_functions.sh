#!/bin/bash
echo "🔧 Ajout des fonctions de parrainage dans AuthManager"

# Créer une sauvegarde
cp auth.js auth.js.backup.parrainage

# Ajouter les fonctions après getErrorMessage
awk '
/getErrorMessage\(error\)/ {found=1; print; next}
found && /^    \}/ { 
    print "    }"
    print ""
    print "    // 🎯 FONCTIONS DE PARRAINAGE"
    print ""
    print "    async genererLienParrainage(userId, email) {"
    print "        try {"
    print "            const codeParrainage = \"ANDU-\" + Math.random().toString(36).substr(2, 8).toUpperCase();"
    print "            "
    print "            await db.collection(\"parrainage\").doc(userId).set({"
    print "                code: codeParrainage,"
    print "                userId: userId,"
    print "                email: email,"
    print "                dateCreation: new Date(),"
    print "                utilisations: 0,"
    print "                maxUtilisations: 5,"
    print "                actif: true,"
    print "                filleuls: [],"
    print "                recompensesTotal: 0"
    print "            });"
    print "            "
    print "            console.log(\"✅ Code parrainage généré:\", codeParrainage);"
    print "            return codeParrainage;"
    print "        } catch (error) {"
    print "            console.error(\"❌ Erreur génération code parrainage:\", error);"
    print "            return null;"
    print "        }"
    print "    }"
    print ""
    print "    async detecterParrainage(email, codeParrainage) {"
    print "        try {"
    print "            console.log(\"🔍 Recherche parrain avec code:\", codeParrainage);"
    print "            "
    print "            const parrainQuery = await db.collection(\"parrainage\")"
    print "                .where(\"code\", \"==\", codeParrainage)"
    print "                .where(\"actif\", \"==\", true)"
    print "                .get();"
    print ""
    print "            if (!parrainQuery.empty) {"
    print "                const parrainDoc = parrainQuery.docs[0];"
    print "                const parrainData = parrainDoc.data();"
    print "                const parrainId = parrainDoc.id;"
    print "                "
    print "                console.log(\"✅ Parrain trouvé:\", parrainData.email);"
    print "                "
    print "                if (parrainData.utilisations < parrainData.maxUtilisations) {"
    print "                    console.log(\"🎯 Attribution du parrainage...\");"
    print "                    "
    print "                    await db.collection(\"parrainage\").doc(parrainId).update({"
    print "                        utilisations: firebase.firestore.FieldValue.increment(1),"
    print "                        filleuls: firebase.firestore.FieldValue.arrayUnion(email)"
    print "                    });"
    print "                    "
    print "                    await this.attribuerRecompenses(parrainId, email);"
    print "                    await this.regenererCode(parrainId);"
    print "                    "
    print "                    return true;"
    print "                }"
    print "            }"
    print "            return false;"
    print "        } catch (error) {"
    print "            console.error(\"❌ Erreur détection parrainage:\", error);"
    print "            return false;"
    print "        }"
    print "    }"
    print ""
    print "    async attribuerRecompenses(parrainId, emailFilleul) {"
    print "        try {"
    print "            const montantParrain = 1000;"
    print "            const montantFilleul = 500;"
    print "            "
    print "            // RÉCOMPENSE POUR LE PARRAIN"
    print "            await db.collection(\"recompenses\").add({"
    print "                userId: parrainId,"
    print "                type: \"parrainage_reussi\","
    print "                montant: montantParrain,"
    print "                description: \"Parrainage réussi - \" + emailFilleul,"
    print "                dateAttribution: new Date(),"
    print "                statut: \"actif\","
    print "                dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)"
    print "            });"
    print "            "
    print "            await db.collection(\"parrainage\").doc(parrainId).update({"
    print "                recompensesTotal: firebase.firestore.FieldValue.increment(montantParrain)"
    print "            });"
    print "            "
    print "            // RÉCOMPENSE POUR LE FILLEUL"
    print "            const filleulQuery = await db.collection(\"users\")"
    print "                .where(\"email\", \"==\", emailFilleul)"
    print "                .get();"
    print "                "
    print "            if (!filleulQuery.empty) {"
    print "                const filleulId = filleulQuery.docs[0].id;"
    print "                "
    print "                await db.collection(\"recompenses\").add({"
    print "                    userId: filleulId,"
    print "                    type: \"bienvenue_parrainage\","
    print "                    montant: montantFilleul,"
    print "                    description: \"Réduction bienvenue par parrainage\","
    print "                    dateAttribution: new Date(),"
    print "                    statut: \"actif\","
    print "                    dateExpiration: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)"
    print "                });"
    print "            }"
    print "            "
    print "            console.log(\"🎁 Récompenses attribuées avec succès\");"
    print "            return true;"
    print "        } catch (error) {"
    print "            console.error(\"❌ Erreur attribution récompenses:\", error);"
    print "            return false;"
    print "        }"
    print "    }"
    print ""
    print "    async regenererCode(userId) {"
    print "        try {"
    print "            const nouveauCode = \"ANDU-\" + Math.random().toString(36).substr(2, 8).toUpperCase();"
    print "            "
    print "            await db.collection(\"parrainage\").doc(userId).update({"
    print "                code: nouveauCode,"
    print "                dateDerniereRegeneration: new Date()"
    print "            });"
    print "            "
    print "            console.log(\"🔄 Code régénéré:\", nouveauCode);"
    print "            return nouveauCode;"
    print "        } catch (error) {"
    print "            console.error(\"❌ Erreur régénération code:\", error);"
    print "            return null;"
    print "        }"
    print "    }"
    print ""
    print "    mettreAJourInterfaceParrainage(userId) {"
    print "        if (!userId) return;"
    print "        "
    print "        console.log(\"🔄 Mise à jour interface parrainage pour:\", userId);"
    print "        "
    print "        db.collection(\"parrainage\").doc(userId).onSnapshot((doc) => {"
    print "            if (doc.exists) {"
    print "                const data = doc.data();"
    print "                "
    print "                // Mettre à jour l'\''interface"
    print "                if (document.getElementById(\"parrainsCount\")) {"
    print "                    document.getElementById(\"parrainsCount\").textContent = data.utilisations || 0;"
    print "                }"
    print "                if (document.getElementById(\"gainsTotal\")) {"
    print "                    document.getElementById(\"gainsTotal\").textContent = (data.recompensesTotal || 0) + \" MRU\";"
    print "                }"
    print "                if (document.getElementById(\"lienParrainage\")) {"
    print "                    const lienParrainage = window.location.origin + \"\"/index.html?ref=\"\" + data.code;"
    print "                    document.getElementById(\"lienParrainage\").value = lienParrainage;"
    print "                }"
    print "                if (document.getElementById(\"limiteParrainage\")) {"
    print "                    document.getElementById(\"limiteParrainage\").textContent = "
    print "                        \"\${data.utilisations || 0}/\${data.maxUtilisations || 5} utilisations\";"
    print "                }"
    print "                "
    print "                const sectionParrainage = document.getElementById(\"parrainageSection\");"
    print "                if (sectionParrainage) {"
    print "                    sectionParrainage.style.display = \"block\";"
    print "                }"
    print "            }"
    print "        });"
    print "    }"
    print ""
    print "    // Méthode resetPassword manquante"
    print "    async resetPassword(email) {"
    print "        try {"
    print "            await firebase.auth().sendPasswordResetEmail(email);"
    print "            return { success: true };"
    print "        } catch (error) {"
    print "            return { success: false, error: this.getErrorMessage(error) };"
    print "        }"
    print "    }"
    found=0; 
    next
}
{print}
' auth.js > auth.js.tmp && mv auth.js.tmp auth.js

echo "✅ Fonctions de parrainage ajoutées à AuthManager"
