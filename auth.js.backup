// auth.js - Syst√®me complet d'authentification et parrainage Andu Xara - VERSION CORRIG√âE

// ========================
// üîê CONFIGURATION FIREBASE
// ========================

const firebaseConfig = {
    apiKey: "AIzaSyB4h6QADPX6c6hDk9vqR4j8B9j6zQwq9x0",
    authDomain: "andu-xara-parrainage.firebaseapp.com",
    projectId: "andu-xara-parrainage",
    storageBucket: "andu-xara-parrainage.firebasestorage.app",
    messagingSenderId: "123456789",
    appId: "1:123456789:web:abcdef123456"
};

if (!firebase.apps.length) {
    firebase.initializeApp(firebaseConfig);
}

const auth = firebase.auth();
const db = firebase.firestore();

// ========================
// üß© CLASSE AUTH MANAGER
// ========================

class AuthManager {
    constructor() {
        this.user = null;
        this.init();
    }

    init() {
        firebase.auth().onAuthStateChanged((user) => {
            this.user = user;
            this.onAuthStateChanged(user);
        });
    }

    async signIn(email, password) {
        try {
            const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
            await this.updateLastLogin(userCredential.user.uid);
            return { success: true, user: userCredential.user };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async signUp(email, password, name = "") {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const codeParrain = urlParams.get('ref');

            const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;

            await db.collection('users').doc(user.uid).set({
                email: email,
                nom: name,
                dateCreation: firebase.firestore.FieldValue.serverTimestamp(),
                dernierLogin: firebase.firestore.FieldValue.serverTimestamp(),
                role: 'user'
            });

            await this.genererLienParrainage(user.uid, email);

            if (codeParrain) {
                await this.detecterParrainage(email, codeParrain);
            }

            closeModal('signupModal');
            return { success: true, user: user };
        } catch (error) {
            console.error("Erreur inscription:", error);
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async signOut() {
        try {
            await firebase.auth().signOut();
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async resetPassword(email) {
        try {
            await firebase.auth().sendPasswordResetEmail(email);
            showMessage('Email de r√©initialisation envoy√©!', 'success');
            closeModal('resetPasswordModal');
            return { success: true };
        } catch (error) {
            return { success: false, error: this.getErrorMessage(error) };
        }
    }

    async updateLastLogin(uid) {
        try {
            await db.collection('users').doc(uid).update({
                lastLogin: firebase.firestore.FieldValue.serverTimestamp()
            });
        } catch (error) {
            console.error('Erreur mise √† jour lastLogin:', error);
        }
    }

    async isAdmin() {
        if (!this.user) return false;
        try {
            const userDoc = await db.collection('users').doc(this.user.uid).get();
            return userDoc.exists && userDoc.data().role === 'admin';
        } catch (error) {
            console.error('Erreur v√©rification admin:', error);
            return false;
        }
    }

    onAuthStateChanged(user) {
        if (user) {
            console.log('üë§ Utilisateur connect√©:', user.email);
            this.initializeParrainage(user);
            setTimeout(() => chargerStatistiquesAdmin(), 2000);
        } else {
            console.log('üîí Utilisateur d√©connect√©');
            const adminSection = document.getElementById('adminSection');
            if (adminSection) adminSection.classList.add('hidden');
        }
    }

    getErrorMessage(error) {
        const errorMessages = {
            'auth/invalid-email': 'Adresse email invalide',
            'auth/user-disabled': 'Ce compte a √©t√© d√©sactiv√©',
            'auth/user-not-found': 'Aucun compte trouv√© avec cet email',
            'auth/wrong-password': 'Mot de passe incorrect',
            'auth/email-already-in-use': 'Cette adresse email est d√©j√† utilis√©e',
            'auth/weak-password': 'Le mot de passe est trop faible',
            'auth/network-request-failed': 'Erreur r√©seau. Veuillez r√©essayer.',
            'auth/too-many-requests': 'Trop de tentatives. Veuillez r√©essayer plus tard.'
        };
        return errorMessages[error.code] || error.message;
    }

    // ========================
    // üéØ SYST√àME DE PARRAINAGE
    // ========================

    async initializeParrainage(user) {
        try {
            if (!user) return;
            const parrainageRef = db.collection('parrainage').doc(user.uid);
            const parrainageSnap = await parrainageRef.get();
            if (!parrainageSnap.exists()) {
                await this.genererLienParrainage(user.uid, user.email);
            }
            this.mettreAJourInterfaceParrainage(user.uid);
        } catch (error) {
            console.error('Erreur initialisation parrainage:', error);
        }
    }

    async genererLienParrainage(userId, email) {
        try {
            const codeParrainage = 'ANDU-' + Math.random().toString(36).substr(2, 8).toUpperCase();
            await db.collection('parrainage').doc(userId).set({
                code: codeParrainage,
                userId: userId,
                email: email,
                dateCreation: firebase.firestore.FieldValue.serverTimestamp(),
                utilisations: 0,
                maxUtilisations: 5,
                actif: true,
                filleuls: [],
                recompensesTotal: 0
            });
            console.log('Code de parrainage g√©n√©r√©:', codeParrainage);
            return codeParrainage;
        } catch (error) {
            console.error('Erreur g√©n√©ration lien parrainage:', error);
            throw error;
        }
    }

    async detecterParrainage(email, codeParrainage) {
        try {
            console.log('D√©tection parrainage pour:', email, 'avec code:', codeParrainage);
            const parrainQuery = await db.collection('parrainage')
                .where('code', '==', codeParrainage)
                .where('actif', '==', true)
                .get();
            if (!parrainQuery.empty) {
                const parrainDoc = parrainQuery.docs[0];
                const parrainData = parrainDoc.data();
                const parrainId = parrainDoc.id;
                console.log('Parrain trouv√©:', parrainData.email);
                if (parrainData.utilisations < parrainData.maxUtilisations) {
                    if (!parrainData.filleuls.includes(email)) {
                        await db.collection('parrainage').doc(parrainId).update({
                            utilisations: firebase.firestore.FieldValue.increment(1),
                            filleuls: firebase.firestore.FieldValue.arrayUnion(email),
                            recompensesTotal: firebase.firestore.FieldValue.increment(100)
                        });
                        await this.attribuerRecompenses(parrainId, email);
                        console.log('Parrainage r√©ussi!');
                        return true;
                    }
                } else {
                    await db.collection('parrainage').doc(parrainId).update({ actif: false });
                }
            }
            return false;
        } catch (error) {
            console.error('Erreur d√©tection parrainage:', error);
            return false;
        }
    }

    async attribuerRecompenses(parrainId, emailFilleul) {
        try {
            await db.collection('recompenses').add({
                userId: parrainId,
                type: "parrainage_reussi",
                montant: 150,
                description: `Parrainage - Nouveau client: ${emailFilleul}`,
                dateAttribution: firebase.firestore.FieldValue.serverTimestamp(),
                statut: "actif"
            });
            await db.collection('recompenses').add({
                email: emailFilleul,
                type: "reduction_parrainage",
                montant: 100,
                description: "R√©duction bienvenue parrainage",
                dateAttribution: firebase.firestore.FieldValue.serverTimestamp(),
                statut: "actif"
            });
            console.log('R√©compenses attribu√©es avec succ√®s');
        } catch (error) {
            console.error('Erreur attribution r√©compenses:', error);
        }
    }

    async regenererCode(userId) {
        try {
            const nouveauCode = 'ANDU-' + Math.random().toString(36).substr(2, 8).toUpperCase();
            await db.collection('parrainage').doc(userId).update({
                code: nouveauCode,
                dateDerniereRegeneration: firebase.firestore.FieldValue.serverTimestamp(),
                utilisations: 0,
                filleuls: [],
                actif: true
            });
            console.log('Nouveau code g√©n√©r√©:', nouveauCode);
            return nouveauCode;
        } catch (error) {
            console.error('Erreur r√©g√©n√©ration code:', error);
            throw error;
        }
    }

    mettreAJourInterfaceParrainage(userId) {
        return db.collection('parrainage').doc(userId).onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                const updateElement = (id, value) => {
                    const element = document.getElementById(id);
                    if (element) element.textContent = value;
                };
                updateElement('parrainsCount', data.utilisations || 0);
                updateElement('gainsTotal', (data.recompensesTotal || 0) + ' MRU');
                const lienParrainage = document.getElementById('lienParrainage');
                if (lienParrainage) {
                    lienParrainage.value = window.location.origin + '/index.html?ref=' + data.code;
                }
                this.afficherFilleuls(data.filleuls || []);
            }
        });
    }

    afficherFilleuls(filleuls) {
        const filleulsList = document.getElementById('filleulsList');
        if (!filleulsList) return;
        if (filleuls.length === 0) {
            filleulsList.innerHTML = '<p class="text-gray-500">Aucun filleul pour le moment</p>';
            return;
        }
        filleulsList.innerHTML = filleuls.map(email => `
            <div class="flex justify-between items-center p-3 bg-white rounded-lg border">
                <span class="text-gray-700">${email}</span>
                <span class="text-green-600 font-semibold">+150 MRU</span>
            </div>
        `).join('');
    }
}

// ========================
// üåê INITIALISATION GLOBALE
// ========================

let authManager;
if (typeof firebase !== 'undefined') {
    authManager = new AuthManager();
} else {
    document.addEventListener('DOMContentLoaded', () => {
        authManager = new AuthManager();
    });
}

// ========================
// üé™ FONCTIONS MODALS
// ========================

function showLoginModal() {
    const modal = document.getElementById('loginModal');
    if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
            const emailInput = document.getElementById('loginEmail');
            if (emailInput) emailInput.focus();
        }, 100);
    }
}

function showSignupModal() {
    const modal = document.getElementById('signupModal');
    if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
            const nameInput = document.getElementById('signupName');
            if (nameInput) nameInput.focus();
        }, 100);
    }
}

function showResetPassword() {
    closeModal('loginModal');
    const modal = document.getElementById('resetPasswordModal');
    if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => {
            const emailInput = document.getElementById('resetEmail');
            if (emailInput) emailInput.focus();
        }, 100);
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// ========================
// üìù GESTION FORMULAIRES
// ========================

document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const result = await authManager.signIn(email, password);
            if (!result.success) {
                showMessage('Erreur: ' + result.error, 'error');
            }
        });
    }

    const signupForm = document.getElementById('signupForm');
    if (signupForm) {
        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            const name = document.getElementById('signupName').value;
            const result = await authManager.signUp(email, password, name);
            if (!result.success) {
                showMessage('Erreur: ' + result.error, 'error');
            }
        });
    }

    const resetForm = document.getElementById('resetPasswordForm');
    if (resetForm) {
        resetForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('resetEmail').value;
            const result = await authManager.resetPassword(email);
            if (!result.success) {
                showMessage('Erreur: ' + result.error, 'error');
            }
        });
    }

    window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (modal.style.display === 'flex') {
                    modal.style.display = 'none';
                }
            });
        }
    });
});

// ========================
// üí¨ FONCTIONS MESSAGES
// ========================

function showMessage(text, type = 'success') {
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        animation: slideInRight 0.3s ease;
        max-width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    if (type === 'success') messageDiv.style.background = '#48bb78';
    else if (type === 'error') messageDiv.style.background = '#e53e3e';
    else if (type === 'warning') messageDiv.style.background = '#ed8936';
    messageDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-exclamation-triangle'}"></i>
            <span>${text}</span>
        </div>
    `;
    document.body.appendChild(messageDiv);
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.parentNode.removeChild(messageDiv);
                }
            }, 300);
        }
    }, 5000);
}

// ========================
// üëë FONCTIONS ADMIN
// ========================

function ouvrirDashboardAdmin() {
    console.log('üîß Fonction ouvrirDashboardAdmin appel√©e');
    if (!authManager || !authManager.user) {
        alert('Veuillez vous connecter en tant qu\'administrateur');
        return;
    }
    authManager.isAdmin().then((isAdmin) => {
        if (!isAdmin) {
            alert('Acc√®s r√©serv√© aux administrateurs');
            return;
        }
        const width = 1200, height = 800;
        const left = (screen.width - width) / 2;
        const top = (screen.height - height) / 2;
        const dashboardWindow = window.open('admin-dashboard.html', '_blank', 
            `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes,toolbar=no,location=no,menubar=no`);
        if (!dashboardWindow) {
            alert('Veuillez autoriser les popups pour ouvrir le dashboard admin');
        }
    }).catch(error => {
        console.error('Erreur v√©rification admin:', error);
        alert('Erreur lors de la v√©rification des droits administrateur');
    });
}

function showCodeManager() {
    console.log('üîß Fonction showCodeManager appel√©e');
    if (!authManager || !authManager.user) {
        alert('Veuillez vous connecter en tant qu\'administrateur');
        return;
    }
    authManager.isAdmin().then((isAdmin) => {
        if (!isAdmin) {
            alert('Acc√®s r√©serv√© aux administrateurs');
            return;
        }
        const width = 1200, height = 800;
        const left = (screen.width - width) / 2;
        const top = (screen.height - height) / 2;
        const dashboardWindow = window.open('admin-dashboard.html#codes', '_blank', 
            `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes,toolbar=no,location=no,menubar=no`);
        if (!dashboardWindow) {
            alert('Veuillez autoriser les popups pour ouvrir le dashboard admin');
        }
    }).catch(error => {
        console.error('Erreur v√©rification admin:', error);
        alert('Erreur lors de la v√©rification des droits administrateur');
    });
}

function showAnalytics() {
    console.log('üîß Fonction showAnalytics appel√©e');
    if (!authManager || !authManager.user) {
        alert('Veuillez vous connecter en tant qu\'administrateur');
        return;
    }
    authManager.isAdmin().then((isAdmin) => {
        if (!isAdmin) {
            alert('Acc√®s r√©serv√© aux administrateurs');
            return;
        }
        const width = 1200, height = 800;
        const left = (screen.width - width) / 2;
        const top = (screen.height - height) / 2;
        const dashboardWindow = window.open('admin-dashboard.html#analytics', '_blank', 
            `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes,toolbar=no,location=no,menubar=no`);
        if (!dashboardWindow) {
            alert('Veuillez autoriser les popups pour ouvrir le dashboard admin');
        }
    }).catch(error => {
        console.error('Erreur v√©rification admin:', error);
        alert('Erreur lors de la v√©rification des droits administrateur');
    });
}

// ========================
// üìä STATISTIQUES ADMIN
// ========================

async function chargerStatistiquesAdmin() {
    console.log('üîÑ Chargement des statistiques admin...');
    if (typeof authManager === 'undefined' || !authManager.user) {
        console.log('‚ùå AuthManager non disponible');
        return;
    }
    try {
        let isAdmin = false;
        if (typeof authManager.isAdmin === 'function') {
            isAdmin = await authManager.isAdmin();
        } else {
            const userDoc = await db.collection('users').doc(authManager.user.uid).get();
            if (userDoc.exists) {
                const userData = userDoc.data();
                isAdmin = userData.role === 'admin';
            }
        }
        if (!isAdmin) {
            document.getElementById('adminSection').classList.add('hidden');
            return;
        }
        document.getElementById('adminSection').classList.remove('hidden');
        const [usersSnapshot, parrainageSnapshot] = await Promise.all([
            db.collection('users').get(),
            db.collection('parrainage').get()
        ]);
        const totalUsers = usersSnapshot.size;
        let totalCodesUsed = 0;
        parrainageSnapshot.forEach(doc => {
            totalCodesUsed += doc.data().utilisations || 0;
        });
        const updateElement = (id, value) => {
            const element = document.getElementById(id);
            if (element) element.textContent = value;
        };
        updateElement('adminActiveClients', totalUsers);
        updateElement('performanceClients', totalUsers);
        updateElement('adminCodesUsed', totalCodesUsed);
        updateElement('performanceCodes', totalCodesUsed);
        console.log('‚úÖ Statistiques mises √† jour');
    } catch (error) {
        console.error('‚ùå Erreur chargement statistiques:', error);
    }
}

// ========================
// üîó FONCTIONS PARRAINAGE
// ========================

window.copierLienParrainage = function() {
    const lienParrainage = document.getElementById('lienParrainage');
    if (lienParrainage) {
        lienParrainage.select();
        lienParrainage.setSelectionRange(0, 99999);
        document.execCommand('copy');
        const copyBtn = document.querySelector('[onclick="copierLienParrainage()"]');
        const originalText = copyBtn.textContent;
        copyBtn.textContent = '‚úì Lien copi√©!';
        copyBtn.classList.add('bg-green-600');
        setTimeout(() => {
            copyBtn.textContent = originalText;
            copyBtn.classList.remove('bg-green-600');
        }, 2000);
    }
};

window.regenererMonCode = async function() {
    if (!authManager.user) return;
    try {
        const nouveauCode = await authManager.regenererCode(authManager.user.uid);
        showMessage(`Nouveau code g√©n√©r√©: ${nouveauCode}`, 'success');
    } catch (error) {
        showMessage('Erreur lors de la r√©g√©n√©ration du code', 'error');
    }
};

// ========================
// üé® ANIMATIONS CSS
// ========================

if (!document.querySelector('#auth-animations')) {
    const style = document.createElement('style');
    style.id = 'auth-animations';
    style.textContent = `
        @keyframes slideInRight { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } }
        @keyframes fadeOut { from { opacity: 1; } to { opacity: 0; } }
        .modal { animation: fadeIn 0.3s ease; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    `;
    document.head.appendChild(style);
}

// ========================
// üåç EXPORT GLOBAL
// ========================

window.ouvrirDashboardAdmin = ouvrirDashboardAdmin;
window.showCodeManager = showCodeManager;
window.showAnalytics = showAnalytics;
window.copierLienParrainage = window.copierLienParrainage;
window.regenererMonCode = window.regenererMonCode;

console.log('‚úÖ auth.js - Version corrig√©e charg√©e avec succ√®s');
